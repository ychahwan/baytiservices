-- Define custom types for roles and permissions
CREATE TYPE public.app_role AS ENUM ('admin', 'moderator');
CREATE TYPE public.app_permission AS ENUM ('channels.delete', 'messages.delete');

-- Table to assign roles to users
CREATE TABLE public.user_roles (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users ON DELETE CASCADE NOT NULL,
  role app_role NOT NULL,
  UNIQUE (user_id, role)
);

-- Table to assign permissions to roles
CREATE TABLE public.role_permissions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  role app_role NOT NULL,
  permission app_permission NOT NULL,
  UNIQUE (role, permission)
);


CREATE OR REPLACE FUNCTION public.custom_access_token_hook(event JSONB)
RETURNS JSONB
LANGUAGE plpgsql STABLE
AS $$
DECLARE
  claims JSONB;
  user_role public.app_role;
BEGIN
  -- Fetch the user's role from the user_roles table
  SELECT role INTO user_role
  FROM public.user_roles
  WHERE user_id = (event->>'user_id')::UUID;

  claims := event->'claims';

  -- Add the user_role to the claims
  IF user_role IS NOT NULL THEN
    claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
  ELSE
    claims := jsonb_set(claims, '{user_role}', 'null');
  END IF;

  -- Update the event with the new claims
  event := jsonb_set(event, '{claims}', claims);
  RETURN event;
END;
$$;



GRANT EXECUTE ON FUNCTION public.custom_access_token_hook TO supabase_auth_admin;

-- Grant usage permission on the schema
GRANT USAGE ON SCHEMA public TO supabase_auth_admin;

-- Revoke execute permissions from other roles for security
REVOKE EXECUTE ON FUNCTION public.custom_access_token_hook FROM authenticated, anon, public;

-- Grant SELECT permission on the user_roles table
GRANT SELECT ON TABLE public.user_roles TO supabase_auth_admin;

-- If you have Row-Level Security (RLS) enabled on the user_roles table,
-- create a policy to allow supabase_auth_admin to read from it
CREATE POLICY "Allow supabase_auth_admin to read user_roles"
  ON public.user_roles
  FOR SELECT
  TO supabase_auth_admin
  USING (true);